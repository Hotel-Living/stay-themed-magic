
import React, { useState } from "react";
import { useAuth } from "@/context/AuthContext";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";
import { useTranslation } from "@/hooks/useTranslation";

export function AgentRegistration() {
  const { signUp } = useAuth();
  const { toast } = useToast();
  const { t } = useTranslation('agents');
  const [isLoading, setIsLoading] = useState(false);
  const [formData, setFormData] = useState({
    email: "",
    password: "",
    firstName: "",
    lastName: "",
    bankAccount: "",
    confirmPassword: ""
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (formData.password !== formData.confirmPassword) {
      toast({
        title: "Error",
        description: "Las contraseñas no coinciden",
        variant: "destructive"
      });
      return;
    }

    setIsLoading(true);

    try {
      // Sign up with specific agent metadata
      const result = await signUp(formData.email, formData.password, {
        first_name: formData.firstName,
        last_name: formData.lastName,
        is_hotel_owner: false,
        user_type: 'agent', // Add specific agent identifier
        registration_source: 'agent_form' // Track registration source
      });

      if (result.success) {
        // Create agent record after successful signup
        const { data: { user } } = await supabase.auth.getUser();
        
        if (user) {
          const { error: agentError } = await supabase
            .from('agents')
            .insert({
              user_id: user.id,
              full_name: `${formData.firstName} ${formData.lastName}`,
              email: formData.email,
              bank_account: formData.bankAccount,
              agent_code: '', // Will be generated by database function
              is_active: true
            });

          if (agentError) {
            console.error("Error creating agent record:", agentError);
          }
        }

        toast({
          title: "Registro exitoso",
          description: "Tu cuenta de agente ha sido creada. Verifica tu email para activarla.",
          variant: "success"
        });

        // Reset form
        setFormData({
          email: "",
          password: "",
          firstName: "",
          lastName: "",
          bankAccount: "",
          confirmPassword: ""
        });
      } else {
        toast({
          title: "Error en el registro",
          description: result.error || "Ha ocurrido un error",
          variant: "destructive"
        });
      }
    } catch (error: any) {
      console.error("Agent registration error:", error);
      toast({
        title: "Error",
        description: "Error inesperado durante el registro",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-900 via-blue-900 to-indigo-900 flex items-center justify-center p-4">
      <div className="max-w-md w-full bg-white/10 backdrop-blur-md rounded-xl p-8 shadow-2xl">
        <h2 className="text-2xl font-bold text-white mb-6 text-center">
          {t('join_button')}
        </h2>
        
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="block text-white mb-2">Nombre</label>
            <input
              type="text"
              name="firstName"
              value={formData.firstName}
              onChange={handleInputChange}
              required
              className="w-full p-3 rounded-lg bg-white/20 text-white placeholder-white/60 border border-white/30"
              placeholder="Tu nombre"
            />
          </div>

          <div>
            <label className="block text-white mb-2">Apellido</label>
            <input
              type="text"
              name="lastName"
              value={formData.lastName}
              onChange={handleInputChange}
              required
              className="w-full p-3 rounded-lg bg-white/20 text-white placeholder-white/60 border border-white/30"
              placeholder="Tu apellido"
            />
          </div>

          <div>
            <label className="block text-white mb-2">Email</label>
            <input
              type="email"
              name="email"
              value={formData.email}
              onChange={handleInputChange}
              required
              className="w-full p-3 rounded-lg bg-white/20 text-white placeholder-white/60 border border-white/30"
              placeholder="tu@email.com"
            />
          </div>

          <div>
            <label className="block text-white mb-2">Contraseña</label>
            <input
              type="password"
              name="password"
              value={formData.password}
              onChange={handleInputChange}
              required
              className="w-full p-3 rounded-lg bg-white/20 text-white placeholder-white/60 border border-white/30"
              placeholder="Contraseña segura"
            />
          </div>

          <div>
            <label className="block text-white mb-2">Confirmar Contraseña</label>
            <input
              type="password"
              name="confirmPassword"
              value={formData.confirmPassword}
              onChange={handleInputChange}
              required
              className="w-full p-3 rounded-lg bg-white/20 text-white placeholder-white/60 border border-white/30"
              placeholder="Confirma tu contraseña"
            />
          </div>

          <div>
            <label className="block text-white mb-2">Cuenta Bancaria</label>
            <input
              type="text"
              name="bankAccount"
              value={formData.bankAccount}
              onChange={handleInputChange}
              required
              className="w-full p-3 rounded-lg bg-white/20 text-white placeholder-white/60 border border-white/30"
              placeholder="IBAN o número de cuenta"
            />
          </div>

          <button
            type="submit"
            disabled={isLoading}
            className="w-full bg-purple-600 hover:bg-purple-700 text-white py-3 rounded-lg font-semibold transition-colors disabled:opacity-50"
          >
            {isLoading ? "Registrando..." : t('join_button')}
          </button>
        </form>
      </div>
    </div>
  );
}

export default AgentRegistration;
