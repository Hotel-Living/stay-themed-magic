import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { supabase } from '@/integrations/supabase/client';
import { useAuth } from '@/context/AuthContext';
import { useToast } from '@/hooks/use-toast';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Textarea } from '@/components/ui/textarea';

export const AssociationRegistration = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    confirmPassword: '',
    associationName: '',
    responsiblePerson: '',
    bankAccount: ''
  });
  
  const { signUp } = useAuth();
  const { toast } = useToast();
  const navigate = useNavigate();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (formData.password !== formData.confirmPassword) {
      toast({
        title: "Error",
        description: "Las contraseñas no coinciden",
        variant: "destructive"
      });
      return;
    }

    try {
      setIsLoading(true);

      // Sign up with user metadata
      const result = await signUp(formData.email, formData.password, {
        first_name: formData.responsiblePerson.split(' ')[0] || '',
        last_name: formData.responsiblePerson.split(' ').slice(1).join(' ') || '',
        is_hotel_owner: false
      });

      if (result.success) {
        // Create association record after successful signup
        const { data: userData } = await supabase.auth.getUser();
        
        if (userData.user) {
          // TODO: Create association record after types are regenerated
          // const { error: associationError } = await supabase
          //   .from('hotel_associations')
          //   .insert({
          //     association_name: formData.associationName,
          //     responsible_person: formData.responsiblePerson,
          //     email: formData.email,
          //     bank_account: formData.bankAccount,
          //     association_code: '' // Will be generated by the database trigger
          //   });

          // if (associationError) {
          //   console.error('Error creating association record:', associationError);
          //   toast({
          //     title: "Error",
          //     description: "Error al crear el registro de asociación",
          //     variant: "destructive"
          //   });
          //   return;
          // }
        }

        toast({
          title: "¡Registro exitoso!",
          description: "Su asociación ha sido registrada. Revise su email para confirmar su cuenta."
        });
        
        // Redirect to association dashboard
        navigate('/panel-asociacion');
      }
    } catch (error: any) {
      toast({
        title: "Error en el registro",
        description: error.message || "Ha ocurrido un error durante el registro",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    setFormData(prev => ({
      ...prev,
      [e.target.name]: e.target.value
    }));
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-slate-900 to-slate-800 flex items-center justify-center p-4">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle className="text-2xl font-bold text-center">Registro de Asociación Hotelera</CardTitle>
          <CardDescription className="text-center">
            Registre su asociación para acceder al panel de gestión
          </CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <Label htmlFor="associationName">Nombre de la Asociación</Label>
              <Input
                id="associationName"
                name="associationName"
                type="text"
                required
                value={formData.associationName}
                onChange={handleInputChange}
                placeholder="Ej: Asociación Marítima"
              />
            </div>
            
            <div>
              <Label htmlFor="responsiblePerson">Persona Responsable</Label>
              <Input
                id="responsiblePerson"
                name="responsiblePerson"
                type="text"
                required
                value={formData.responsiblePerson}
                onChange={handleInputChange}
                placeholder="Nombre completo del responsable"
              />
            </div>
            
            <div>
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                name="email"
                type="email"
                required
                value={formData.email}
                onChange={handleInputChange}
                placeholder="email@asociacion.com"
              />
            </div>
            
            <div>
              <Label htmlFor="bankAccount">Cuenta Bancaria</Label>
              <Input
                id="bankAccount"
                name="bankAccount"
                type="text"
                required
                value={formData.bankAccount}
                onChange={handleInputChange}
                placeholder="IBAN o número de cuenta para comisiones"
              />
            </div>
            
            <div>
              <Label htmlFor="password">Contraseña</Label>
              <Input
                id="password"
                name="password"
                type="password"
                required
                value={formData.password}
                onChange={handleInputChange}
              />
            </div>
            
            <div>
              <Label htmlFor="confirmPassword">Confirmar Contraseña</Label>
              <Input
                id="confirmPassword"
                name="confirmPassword"
                type="password"
                required
                value={formData.confirmPassword}
                onChange={handleInputChange}
              />
            </div>
            
            <Button 
              type="submit" 
              className="w-full" 
              disabled={isLoading}
            >
              {isLoading ? 'Registrando...' : 'Registrar Asociación'}
            </Button>
          </form>
        </CardContent>
      </Card>
    </div>
  );
};